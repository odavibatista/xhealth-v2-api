// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id_user String @id @default(cuid())
  name           String   @db.LongText
  password       String   @db.LongText
  birth_date     String   @db.LongText
  email          String   @unique @db.Char(255)
  phone_number   String   @unique @db.Char(255)
  gym_plan_id   String
  check_privacy  Boolean
  address_id     String @unique
  createdAt     DateTime @default(now())
  updatedAt    DateTime @updatedAt

  address             Address              @relation(fields: [address_id], references: [id_address])
  user_gym_plan GymPlan @relation(fields: [gym_plan_id], references: [id_gym_plan])
  user_extra_services UserExtraService[]
  login_logs     LoginLog[]
  passwordHistories   PasswordHistory[]

  @@map("users")
}

model LoginLog {
  id            String   @id @default(cuid())
  user_id       String
  ip            String
  login_attempt Int
  is_blocked    Boolean
  updated_at    DateTime @default(now()) @updatedAt
  created_at    DateTime @default(now())

  user User @relation(fields: [user_id], references: [id_user])

  @@map("login_logs")
}
model PasswordHistory {
  id         String @id @default(cuid())
  user_id    String
  password   String   @db.LongText
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id_user])

  @@index([user_id])
  @@map("password_histories")
}

model UF {
  id_uf      String @id @default(cuid()) @map("id")
  name    String
  acronym String
  ibge_id Int    @unique

  addresses    Address[]

  @@unique([name, acronym])
  @@map("ufs")
}

model IbgeCity {
  id            String @id @default(cuid())
  ibge_id       Int
  name          String
  ibge_state_id Int

  @@map("ibge_cities")
}

model Address {
  id_address String @id @default(cuid())
  cep        String?  @db.Char(255)
  street     String?  @db.Char(255)
  number     String?  @db.Char(255)
  complement String?  @db.Char(255)
  city       String?  @db.Char(255)
  uf_id      String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("addresses")

  uf      UF?      @relation(fields: [uf_id], references: [id_uf])
  user    User?
  gym     Gym?
}

model Gym {
  id_gym String @id @default(cuid())
  name String
  address_id String @unique
  phone_number String @unique
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  address Address @relation(fields: [address_id], references: [id_address])

  @@map("gyms")
  @@unique([name, address_id])
}

model GymPlan {
  id_gym_plan String @id @default(cuid())
  name String
  description String
  price Float
  duration Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users User[]

  @@map("gym_plans")
}

model SportModality {
  id_sport_modality String @id @default(cuid())
  name String
  description String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sport_modalities")
}

model Testimony {
  id_testimony String @id @default(cuid())
  personName String
  stars Int
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("testimonies")
}

model Trainer {
  id_trainer String @id @default(cuid())
  name String
  instagram String?
  twitter String?
  youtube String?
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("trainers")
}

model ExtraService {
  id_extra_service String @id @default(cuid())
  name String
  description String
  price Float
  imageUrl String
  created_by String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user_extra_services UserExtraService[]
  createdBy Administrator @relation(fields: [created_by], references: [id_administrator])

  @@map("extra_services")
}

model UserExtraService {
  id_user_extra_service String @id @default(cuid())
  user_id String
  extra_service_id String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id_user])
  extra_service ExtraService @relation(fields: [extra_service_id], references: [id_extra_service])

  @@map("user_extra_services")
}

model Administrator {
  id_administrator         String @id @default(cuid())
  email      String        @unique
  name       String        @db.LongText
  password   String        @db.LongText
  role       AdministratorRole
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt

  ExtraService ExtraService[]

  @@map("administrators")
}

enum AdministratorRole {
  ADMIN
}